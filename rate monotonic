//ratemonotonic
#include <stdio.h> 
// Structure to represent a process 
struct Process { 
int execution_time; 
int time_period; 
}; 
// Function to calculate the least common multiple (LCM) 
int lcm(int a, int b) { 
int max = (a > b) ? a : b; 
while (1) { 
if (max % a == 0 && max % b == 0) 
return max; 
max++; 
} 
} 
// Function to check if the set of processes is schedulable 
int is_schedulable(struct Process processes[], int n) { 
    float utilization = 0.0; 
    for (int i = 0; i < n; i++) { 
        utilization += (float)processes[i].execution_time / processes[i].time_period; 
    } 
    return utilization <= 1.0; 
} 
int main() { 
    struct Process processes[] = { 
        {3, 20}, // P1 
        {2, 5},  // P2 
        {2, 10}  // P3 
    }; 
    int n = sizeof(processes) / sizeof(processes[0]); 
 
    // Check if the processes are schedulable 
    if (!is_schedulable(processes, n)) { 
        printf("The given set of processes is not schedulable.\n"); 
        return 0; 
    } 
    // Calculate the scheduling time (LCM of time periods) 
    int scheduling_time = lcm(processes[0].time_period, processes[1].time_period); 
    scheduling_time = lcm(scheduling_time, processes[2].time_period); 
    // Display the execution order 
    printf("Execution order:\n"); 
    for (int t = 0; t < scheduling_time; t++) { 
        if (t % processes[1].time_period == 0) 
            printf("P2 "); 
        if (t % processes[2].time_period == 0) 
printf("P3 "); 
if (t % processes[0].time_period == 0) 
printf("P1 "); 
} 
printf("\n"); 
return 0; 
}
