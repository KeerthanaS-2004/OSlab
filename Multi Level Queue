//multilevel
#include <stdio.h>
void findWT(int p[], int n, int bt[], int at[], int wt[]) {
    wt[0] = 0;
    for (int i = 1; i < n; i++) {
        wt[i] = bt[i - 1] + wt[i - 1];
        if (wt[i] < 0)
            wt[i] = 0;
    }
}

void findTAT(int p[], int n, int bt[], int wt[], int tat[]) {
    for (int i = 0; i < n; i++)
        tat[i] = bt[i] + wt[i];
}

void RR(int p[], int n, int bt[], int at[], int quantum) {
    int wt[n], tat[n], ct[n], total_wt = 0, total_tat = 0;
    int rem_bt[n];
    int completed = 0, time = 0;

    for (int i = 0; i < n; i++)
        rem_bt[i] = bt[i];

    while (completed < n) {
        for (int i = 0; i < n; i++) {
            if (rem_bt[i] > 0 && at[i] <= time) {
                if (rem_bt[i] <= quantum) {
                    time += rem_bt[i];
                    rem_bt[i] = 0;
                    ct[i] = time;
                    completed++;
                } else {
                    time += quantum;
                    rem_bt[i] -= quantum;
                }
            }
        }
    }

    findWT(p, n, bt, at, wt);
    findTAT(p, n, bt, wt, tat);

    printf("Process\tBT\tAT\tWT\tTAT\tCT\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\t%d\n", p[i], bt[i], at[i], wt[i], tat[i], ct[i]);
        total_wt += wt[i];
        total_tat += tat[i];
    }

    printf("Avg WT(Round Robin) = %f\n", (float)total_wt / n);
    printf("Avg TAT(Round Robin) = %f\n", (float)total_tat / n);
}

void fcfs(int p[], int n, int bt[], int at[]) {
    int wt[n], tat[n], ct[n], total_wt = 0, total_tat = 0;

    findWT(p, n, bt, at, wt);
    findTAT(p, n, bt, wt, tat);

    printf("Process\tBT\tAT\tWT\tTAT\tCT\n");
    for (int i = 0; i < n; i++) {
        ct[i] = at[i] + bt[i];
        printf("%d\t%d\t%d\t%d\t%d\t%d\n", p[i], bt[i], at[i], wt[i], tat[i], ct[i]);
        total_wt += wt[i];
        total_tat += tat[i];
    }

    printf("Avg WT(FCFS) = %f\n", (float)total_wt / n);
    printf("Avg TAT(FCFS) = %f\n", (float)total_tat / n);
}

int main() {
    int p[] = {1, 2, 3, 4, 5};
    int n = sizeof(p) / sizeof(p[0]);
    int bt[] = {10, 5, 8, 12, 15};
    int at[] = {0, 1, 2, 3, 4};
    int quantum = 2;

    RR(p, n, bt, at, quantum);
    fcfs(p, n, bt, at);

    return 0;
}
